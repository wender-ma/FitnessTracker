<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FitProgress - Sua Jornada de Transformação</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@ffmpeg/ffmpeg@0.12.7/dist/umd/ffmpeg.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@ffmpeg/util@0.12.1/dist/umd/index.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 3em;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .main-content {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .tabs {
            display: flex;
            margin-bottom: 30px;
            border-radius: 12px;
            background: #f8f9fa;
            padding: 6px;
        }

        .tab {
            flex: 1;
            padding: 12px 20px;
            border: none;
            background: transparent;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .tab.active {
            background: #667eea;
            color: white;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .upload-area {
            border: 3px dashed #667eea;
            border-radius: 12px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .upload-area:hover {
            border-color: #764ba2;
            background: rgba(102, 126, 234, 0.05);
        }

        .upload-area.dragover {
            border-color: #764ba2;
            background: rgba(102, 126, 234, 0.1);
            transform: scale(1.02);
        }

        .upload-icon {
            font-size: 3em;
            margin-bottom: 15px;
            color: #667eea;
        }

        .photo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .photo-item {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .photo-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0,0,0,0.15);
        }

        .photo-item img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .photo-info {
            padding: 15px;
        }

        .photo-date {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 5px;
        }

        .photo-type {
            display: inline-block;
            background: #e9ecef;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.8em;
            margin-bottom: 5px;
        }

        .photo-notes {
            font-size: 0.9em;
            color: #666;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .video-preview {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            margin: 20px 0;
        }

        .video-settings {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.3s ease;
            border-radius: 10px;
        }

        .filter-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 8px 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            background: white;
        }

        .auth-section {
            text-align: center;
            padding: 40px 20px;
        }

        .auth-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .social-btn {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 20px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .social-btn:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .stat-card {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }

        .stat-number {
            font-size: 2em;
            font-weight: 700;
            color: #667eea;
        }

        .stat-label {
            color: #666;
            margin-top: 5px;
        }

        .timeline {
            position: relative;
            margin: 20px 0;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 50%;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #667eea;
            transform: translateX(-50%);
        }

        .timeline-item {
            display: flex;
            margin: 20px 0;
            position: relative;
        }

        .timeline-item:nth-child(odd) {
            justify-content: flex-start;
        }

        .timeline-item:nth-child(even) {
            justify-content: flex-end;
        }

        .timeline-content {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            max-width: 300px;
            position: relative;
        }

        .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            font-size: 14px;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.error {
            background: #dc3545;
        }

        .toast.info {
            background: #17a2b8;
        }

        .toast.warning {
            background: #ffc107;
            color: #000;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .tabs {
                flex-direction: column;
            }
            
            .filter-controls {
                justify-content: center;
            }
            
            .auth-buttons {
                flex-direction: column;
                align-items: center;
            }
        }

        .comparison-view {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }

        .comparison-item {
            text-align: center;
        }

        .comparison-item img {
            width: 100%;
            height: 300px;
            object-fit: cover;
            border-radius: 8px;
        }

        .privacy-notice {
            background: rgba(40, 167, 69, 0.1);
            border: 1px solid rgba(40, 167, 69, 0.2);
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            color: #155724;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🏋️ FitProgress</h1>
            <p>Acompanhe sua jornada de transformação corporal</p>
        </div>

        <div class="main-content">
            <div class="privacy-notice">
                <strong>🔒 Privacidade Garantida:</strong> Suas fotos são processadas localmente no seu dispositivo. Nenhuma imagem é enviada para servidores externos.
            </div>

            <div class="tabs">
                <button class="tab active" onclick="switchTab('upload')">📸 Upload</button>
                <button class="tab" onclick="switchTab('gallery')">🖼️ Galeria</button>
                <button class="tab" onclick="switchTab('video')">🎬 Vídeo</button>
                <button class="tab" onclick="switchTab('stats')">📊 Estatísticas</button>
                <button class="tab" onclick="switchTab('settings')">⚙️ Configurações</button>
            </div>

            <!-- Upload Tab -->
            <div id="upload" class="tab-content active">
                <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                    <div class="upload-icon">📷</div>
                    <h3>Adicionar Fotos de Progresso</h3>
                    <p>Clique aqui ou arraste suas fotos (máx. 10MB cada)</p>
                    <input type="file" id="fileInput" multiple accept="image/*" style="display: none;">
                </div>

                <div class="form-group">
                    <label>Data da Foto:</label>
                    <input type="date" id="photoDate" class="form-control" value="">
                </div>

                <div class="form-group">
                    <label>Tipo de Foto:</label>
                    <select id="photoType" class="form-control">
                        <option value="frente">Frente</option>
                        <option value="perfil">Perfil</option>
                        <option value="tras">Trás</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Notas (opcional):</label>
                    <textarea id="photoNotes" class="form-control" rows="3" placeholder="Ex: Semana 4, peso 75kg..."></textarea>
                </div>

                <div class="form-group">
                    <label>Etiqueta da Sessão:</label>
                    <input type="text" id="sessionLabel" class="form-control" placeholder="Ex: Semana 4, Mês 2...">
                </div>
            </div>

            <!-- Gallery Tab -->
            <div id="gallery" class="tab-content">
                <div class="filter-controls">
                    <select id="typeFilter" class="filter-select">
                        <option value="all">Todos os tipos</option>
                        <option value="frente">Frente</option>
                        <option value="perfil">Perfil</option>
                        <option value="tras">Trás</option>
                    </select>
                    
                    <select id="periodFilter" class="filter-select">
                        <option value="all">Todos os períodos</option>
                        <option value="week">Última semana</option>
                        <option value="month">Último mês</option>
                        <option value="3months">Últimos 3 meses</option>
                    </select>

                    <button class="btn btn-secondary" onclick="toggleComparisonMode()">
                        <span id="comparisonModeBtn">📊 Modo Comparação</span>
                    </button>
                </div>

                <div id="photoGrid" class="photo-grid"></div>
                
                <div id="comparisonView" class="comparison-view" style="display: none;">
                    <div class="comparison-item">
                        <h4>Antes</h4>
                        <div id="beforePhoto">Selecione uma foto</div>
                    </div>
                    <div class="comparison-item">
                        <h4>Depois</h4>
                        <div id="afterPhoto">Selecione uma foto</div>
                    </div>
                </div>
            </div>

            <!-- Video Tab -->
            <div id="video" class="tab-content">
                <h3>🎬 Gerar Vídeo de Evolução</h3>
                
                <div class="video-settings">
                    <div class="form-group">
                        <label>Layout do Vídeo:</label>
                        <select id="videoLayout" class="form-control">
                            <option value="sequence">Sequência Simples</option>
                            <option value="fade">Fade entre Fotos</option>
                            <option value="sidebyside">Comparação Lado a Lado</option>
                            <option value="grid">Grade</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Resolução:</label>
                        <select id="videoResolution" class="form-control">
                            <option value="720p">HD (720p)</option>
                            <option value="1080p" selected>Full HD (1080p)</option>
                            <option value="4k">4K</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Duração por Foto (segundos):</label>
                        <input type="range" id="photoDuration" min="0.5" max="3" step="0.1" value="1" class="form-control">
                        <span id="durationValue">1.0s</span>
                    </div>

                    <div class="form-group">
                        <label>Mostrar Datas:</label>
                        <input type="checkbox" id="showDates" checked> Sim
                    </div>

                    <div class="form-group">
                        <label>Posição da Data:</label>
                        <select id="datePosition" class="form-control">
                            <option value="top-left">Superior Esquerdo</option>
                            <option value="top-right">Superior Direito</option>
                            <option value="bottom-left">Inferior Esquerdo</option>
                            <option value="bottom-right" selected>Inferior Direito</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label>Período das Fotos:</label>
                    <div style="display: flex; gap: 10px;">
                        <input type="date" id="startDate" class="form-control">
                        <input type="date" id="endDate" class="form-control">
                    </div>
                </div>

                <button class="btn btn-primary" onclick="generateVideo()" id="generateBtn">
                    🎬 Gerar Vídeo
                </button>

                <div id="progressBar" class="progress-bar" style="display: none;">
                    <div id="progressFill" class="progress-fill" style="width: 0%"></div>
                </div>
                
                <div id="progressText" style="text-align: center; margin: 10px 0; display: none;">
                    Preparando fotos...
                </div>

                <div id="videoPreview" class="video-preview" style="display: none;">
                    <h4>Pré-visualização</h4>
                    <video id="previewVideo" controls style="max-width: 100%; border-radius: 8px;"></video>
                    <div style="margin-top: 15px;">
                        <button class="btn btn-primary" onclick="downloadVideo()">⬇️ Download</button>
                        <button class="btn btn-secondary" onclick="shareVideo()">📤 Compartilhar</button>
                    </div>
                </div>
            </div>

            <!-- Stats Tab -->
            <div id="stats" class="tab-content">
                <h3>📊 Suas Estatísticas</h3>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="totalPhotos">0</div>
                        <div class="stat-label">Fotos Total</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="daysSince">0</div>
                        <div class="stat-label">Dias de Jornada</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="videosCreated">0</div>
                        <div class="stat-label">Vídeos Criados</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="currentStreak">0</div>
                        <div class="stat-label">Sequência Atual</div>
                    </div>
                </div>

                <div id="timeline" class="timeline"></div>
            </div>

            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <h3>⚙️ Configurações</h3>

                <div class="auth-section">
                    <h4>Conta e Sincronização</h4>
                    <p>Faça login para sincronizar seus dados entre dispositivos</p>
                    
                    <div class="auth-buttons">
                        <button class="social-btn" onclick="loginGoogle()">
                            <span>🔍</span> Entrar com Google
                        </button>
                        <button class="social-btn" onclick="loginApple()">
                            <span>🍎</span> Entrar com Apple
                        </button>
                        <button class="social-btn" onclick="loginEmail()">
                            <span>✉️</span> Entrar com E-mail
                        </button>
                    </div>
                </div>

                <hr style="margin: 30px 0;">

                <div class="form-group">
                    <h4>Preferências</h4>
                    
                    <label>
                        <input type="checkbox" id="autoBackup"> Backup automático na nuvem
                    </label>
                    
                    <label>
                        <input type="checkbox" id="notifications"> Notificações de lembrete
                    </label>
                    
                    <label>
                        <input type="checkbox" id="telemetry"> Enviar dados de uso anônimos (ajuda a melhorar o app)
                    </label>
                </div>

                <hr style="margin: 30px 0;">

                <div class="form-group">
                    <h4>Privacidade e Dados</h4>
                    <button class="btn btn-secondary" onclick="exportData()">📤 Exportar Meus Dados</button>
                    <button class="btn btn-danger" onclick="deleteAllData()" style="margin-left: 10px;">🗑️ Excluir Todos os Dados</button>
                </div>

                <div class="privacy-notice">
                    <strong>Sobre a Privacidade:</strong> Por padrão, todas as suas fotos são processadas localmente no seu dispositivo. Nenhuma imagem é enviada para nossos servidores, garantindo total privacidade dos seus dados.
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <h3>Login com E-mail</h3>
            <form id="loginForm">
                <div class="form-group">
                    <label>E-mail:</label>
                    <input type="email" id="loginEmail" class="form-control" required>
                </div>
                <div class="form-group">
                    <label>Senha:</label>
                    <input type="password" id="loginPassword" class="form-control" required>
                </div>
                <div style="text-align: center; margin-top: 20px;">
                    <button type="submit" class="btn btn-primary">Entrar</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('loginModal')" style="margin-left: 10px;">Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast notifications -->
    <div id="toast" class="toast"></div>

    <script>
        // Global state
        let photos = JSON.parse(localStorage.getItem('fitProgressPhotos') || '[]');
        let settings = JSON.parse(localStorage.getItem('fitProgressSettings') || '{}');
        let currentUser = JSON.parse(localStorage.getItem('fitProgressUser') || 'null');
        let comparisonMode = false;
        let selectedPhotos = [];
        let ffmpeg = null;
        let ffmpegLoaded = false;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            // Set today's date as default
            document.getElementById('photoDate').value = new Date().toISOString().split('T')[0];
            
            // Setup file input handler
            document.getElementById('fileInput').addEventListener('change', handleFileSelect);
            
            // Setup drag and drop
            setupDragAndDrop();
            
            // Setup form handlers
            setupFormHandlers();
            
            // Load existing photos
            displayPhotos();
            
            // Update stats
            updateStats();
            
            // Load settings
            loadSettings();
            
            // Initialize FFmpeg
            initializeFFmpeg();
        }

        async function initializeFFmpeg() {
            try {
                if (typeof FFmpeg !== 'undefined') {
                    ffmpeg = new FFmpeg.FFmpeg();
                    
                    ffmpeg.on('log', ({ message }) => {
                        console.log('FFmpeg:', message);
                    });
                    
                    ffmpeg.on('progress', ({ progress }) => {
                        if (document.getElementById('progressBar').style.display !== 'none') {
                            const percentage = Math.round(progress * 100);
                            document.getElementById('progressFill').style.width = percentage + '%';
                            document.getElementById('progressText').textContent = `Processando vídeo... ${percentage}%`;
                        }
                    });
                    
                    // Load FFmpeg core (this might take a moment)
                    showToast('Carregando processador de vídeo...', 'info');
                    await ffmpeg.load({
                        coreURL: 'https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.12.6/dist/umd/ffmpeg-core.js',
                        wasmURL: 'https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.12.6/dist/umd/ffmpeg-core.wasm',
                    });
                    
                    ffmpegLoaded = true;
                    showToast('Processador de vídeo carregado!');
                    
                    // Enable advanced video options
                    addAdvancedVideoOptions();
                } else {
                    console.warn('FFmpeg não disponível, usando fallback');
                }
            } catch (error) {
                console.error('Erro ao carregar FFmpeg:', error);
                showToast('Modo básico ativo. Algumas funcionalidades avançadas podem não estar disponíveis.', 'warning');
            }
        }

        function addAdvancedVideoOptions() {
            const videoSettings = document.querySelector('.video-settings');
            
            // Add codec selection
            const codecGroup = document.createElement('div');
            codecGroup.className = 'form-group';
            codecGroup.innerHTML = `
                <label>Codec de Vídeo:</label>
                <select id="videoCodec" class="form-control">
                    <option value="libx264">H.264 (Compatibilidade máxima)</option>
                    <option value="libx265">H.265 (Menor tamanho)</option>
                    <option value="libvpx-vp9">VP9 (Web otimizado)</option>
                </select>
            `;
            
            // Add bitrate control
            const bitrateGroup = document.createElement('div');
            bitrateGroup.className = 'form-group';
            bitrateGroup.innerHTML = `
                <label>Qualidade do Vídeo:</label>
                <select id="videoBitrate" class="form-control">
                    <option value="1000k">Economia (1 Mbps)</option>
                    <option value="3000k" selected>Boa (3 Mbps)</option>
                    <option value="8000k">Alta (8 Mbps)</option>
                    <option value="15000k">Máxima (15 Mbps)</option>
                </select>
            `;
            
            // Add transition effects
            const transitionGroup = document.createElement('div');
            transitionGroup.className = 'form-group';
            transitionGroup.innerHTML = `
                <label>Efeito de Transição:</label>
                <select id="transitionEffect" class="form-control">
                    <option value="none">Sem transição</option>
                    <option value="fade">Fade</option>
                    <option value="crossfade">Crossfade</option>
                    <option value="slide">Deslizar</option>
                    <option value="zoom">Zoom</option>
                </select>
            `;
            
            // Add audio options
            const audioGroup = document.createElement('div');
            audioGroup.className = 'form-group';
            audioGroup.innerHTML = `
                <label>Trilha Sonora:</label>
                <input type="file" id="audioFile" accept="audio/*" class="form-control">
                <small>Adicione uma música de fundo (MP3, WAV, etc.)</small>
            `;
            
            videoSettings.appendChild(codecGroup);
            videoSettings.appendChild(bitrateGroup);
            videoSettings.appendChild(transitionGroup);
            videoSettings.appendChild(audioGroup);
        }

        function setupDragAndDrop() {
            const uploadArea = document.querySelector('.upload-area');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, preventDefaults, false);
            });
            
            ['dragenter', 'dragover'].forEach(eventName => {
                uploadArea.addEventListener(eventName, () => uploadArea.classList.add('dragover'), false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, () => uploadArea.classList.remove('dragover'), false);
            });
            
            uploadArea.addEventListener('drop', handleDrop, false);
        }

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        function handleDrop(e) {
            const files = e.dataTransfer.files;
            processFiles(files);
        }

        function handleFileSelect(e) {
            processFiles(e.target.files);
        }

        function setupFormHandlers() {
            // Photo duration slider
            document.getElementById('photoDuration').addEventListener('input', function() {
                document.getElementById('durationValue').textContent = this.value + 's';
            });
            
            // Filter handlers
            document.getElementById('typeFilter').addEventListener('change', displayPhotos);
            document.getElementById('periodFilter').addEventListener('change', displayPhotos);
        }

        function processFiles(files) {
            Array.from(files).forEach(file => {
                if (file.type.startsWith('image/')) {
                    if (file.size > 10 * 1024 * 1024) {
                        showToast('Arquivo muito grande. Máximo 10MB por foto.', 'error');
                        return;
                    }
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        addPhoto(e.target.result, file.name);
                    };
                    reader.readAsDataURL(file);
                } else {
                    showToast('Formato não suportado. Use apenas imagens.', 'error');
                }
            });
        }

        function addPhoto(dataUrl, filename) {
            const photo = {
                id: Date.now() + Math.random(),
                dataUrl: dataUrl,
                filename: filename,
                date: document.getElementById('photoDate').value,
                type: document.getElementById('photoType').value,
                notes: document.getElementById('photoNotes').value,
                sessionLabel: document.getElementById('sessionLabel').value,
                timestamp: new Date().toISOString()
            };
            
            photos.push(photo);
            savePhotos();
            displayPhotos();
            updateStats();
            
            // Clear form
            document.getElementById('photoNotes').value = '';
            document.getElementById('sessionLabel').value = '';
            
            showToast('Foto adicionada com sucesso!');
        }

        function savePhotos() {
            localStorage.setItem('fitProgressPhotos', JSON.stringify(photos));
        }

        function displayPhotos() {
            const grid = document.getElementById('photoGrid');
            const typeFilter = document.getElementById('typeFilter').value;
            const periodFilter = document.getElementById('periodFilter').value;
            
            let filteredPhotos = photos.slice();
            
            // Type filter
            if (typeFilter !== 'all') {
                filteredPhotos = filteredPhotos.filter(photo => photo.type === typeFilter);
            }
            
            // Period filter
            if (periodFilter !== 'all') {
                const now = new Date();
                const filterDate = new Date(now);
                
                switch(periodFilter) {
                    case 'week':
                        filterDate.setDate(filterDate.getDate() - 7);
                        break;
                    case 'month':
                        filterDate.setMonth(filterDate.getMonth() - 1);
                        break;
                    case '3months':
                        filterDate.setMonth(filterDate.getMonth() - 3);
                        break;
                }
                
                filteredPhotos = filteredPhotos.filter(photo => new Date(photo.date) >= filterDate);
            }
            
            // Sort by date (newest first)
            filteredPhotos.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            grid.innerHTML = '';
            
            if (filteredPhotos.length === 0) {
                grid.innerHTML = '<div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #666;">Nenhuma foto encontrada. Adicione suas primeiras fotos na aba Upload!</div>';
                return;
            }
            
            filteredPhotos.forEach(photo => {
                const photoElement = createPhotoElement(photo);
                grid.appendChild(photoElement);
            });
        }

        function createPhotoElement(photo) {
            const div = document.createElement('div');
            div.className = 'photo-item';
            div.innerHTML = `
                <img src="${photo.dataUrl}" alt="${photo.filename}" loading="lazy">
                <div class="photo-info">
                    <div class="photo-date">${formatDate(photo.date)}</div>
                    <span class="photo-type">${photo.type}</span>
                    ${photo.sessionLabel ? `<div style="font-weight: 600; color: #764ba2; margin: 5px 0;">${photo.sessionLabel}</div>` : ''}
                    ${photo.notes ? `<div class="photo-notes">${photo.notes}</div>` : ''}
                </div>
                <button class="delete-btn" onclick="deletePhoto('${photo.id}')" title="Excluir foto">×</button>
            `;
            
            // Add click handler for comparison mode
            if (comparisonMode) {
                div.style.cursor = 'pointer';
                div.addEventListener('click', () => selectPhotoForComparison(photo));
            }
            
            return div;
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('pt-BR');
        }

        function deletePhoto(photoId) {
            if (confirm('Tem certeza que deseja excluir esta foto?')) {
                photos = photos.filter(photo => photo.id != photoId);
                savePhotos();
                displayPhotos();
                updateStats();
                showToast('Foto excluída com sucesso!');
            }
        }

        function toggleComparisonMode() {
            comparisonMode = !comparisonMode;
            const btn = document.getElementById('comparisonModeBtn');
            const comparisonView = document.getElementById('comparisonView');
            
            if (comparisonMode) {
                btn.textContent = '❌ Sair da Comparação';
                comparisonView.style.display = 'grid';
                selectedPhotos = [];
            } else {
                btn.textContent = '📊 Modo Comparação';
                comparisonView.style.display = 'none';
                selectedPhotos = [];
            }
            
            displayPhotos();
        }

        function selectPhotoForComparison(photo) {
            if (selectedPhotos.length < 2) {
                selectedPhotos.push(photo);
                
                if (selectedPhotos.length === 1) {
                    document.getElementById('beforePhoto').innerHTML = `
                        <img src="${photo.dataUrl}" alt="Before" style="width: 100%; height: 300px; object-fit: cover; border-radius: 8px;">
                        <p>${formatDate(photo.date)} - ${photo.type}</p>
                    `;
                } else if (selectedPhotos.length === 2) {
                    document.getElementById('afterPhoto').innerHTML = `
                        <img src="${photo.dataUrl}" alt="After" style="width: 100%; height: 300px; object-fit: cover; border-radius: 8px;">
                        <p>${formatDate(photo.date)} - ${photo.type}</p>
                    `;
                }
            } else {
                // Reset selection
                selectedPhotos = [photo];
                document.getElementById('beforePhoto').innerHTML = `
                    <img src="${photo.dataUrl}" alt="Before" style="width: 100%; height: 300px; object-fit: cover; border-radius: 8px;">
                    <p>${formatDate(photo.date)} - ${photo.type}</p>
                `;
                document.getElementById('afterPhoto').innerHTML = 'Selecione uma foto';
            }
        }

        function switchTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked tab
            event.target.classList.add('active');
            
            // Update video date ranges when switching to video tab
            if (tabName === 'video') {
                updateVideoDateRanges();
            }
        }

        function updateVideoDateRanges() {
            if (photos.length === 0) return;
            
            const dates = photos.map(photo => photo.date).sort();
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            
            startDate.value = dates[0];
            endDate.value = dates[dates.length - 1];
        }

        async function generateVideo() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const layout = document.getElementById('videoLayout').value;
            const resolution = document.getElementById('videoResolution').value;
            const duration = parseFloat(document.getElementById('photoDuration').value);
            const showDates = document.getElementById('showDates').checked;
            const datePosition = document.getElementById('datePosition').value;
            
            // Filter photos by date range
            let videoPhotos = photos.filter(photo => {
                const photoDate = photo.date;
                return (!startDate || photoDate >= startDate) && (!endDate || photoDate <= endDate);
            });
            
            if (videoPhotos.length === 0) {
                showToast('Nenhuma foto encontrada no período selecionado.', 'error');
                return;
            }
            
            // Sort by date
            videoPhotos.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            showToast('Iniciando geração do vídeo...');
            
            // Show progress
            const progressBar = document.getElementById('progressBar');
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            const generateBtn = document.getElementById('generateBtn');
            
            progressBar.style.display = 'block';
            progressText.style.display = 'block';
            generateBtn.disabled = true;
            generateBtn.textContent = 'Processando...';
            
            try {
                let video;
                
                if (ffmpegLoaded && ffmpeg) {
                    // Use FFmpeg for professional video generation
                    video = await createVideoWithFFmpeg(videoPhotos, {
                        layout,
                        resolution,
                        duration,
                        showDates,
                        datePosition,
                        codec: document.getElementById('videoCodec')?.value || 'libx264',
                        bitrate: document.getElementById('videoBitrate')?.value || '3000k',
                        transition: document.getElementById('transitionEffect')?.value || 'none',
                        audioFile: document.getElementById('audioFile')?.files[0] || null
                    }, (progress, status) => {
                        progressFill.style.width = progress + '%';
                        progressText.textContent = status;
                    });
                } else {
                    // Fallback to canvas-based generation
                    video = await createVideoFromPhotos(videoPhotos, {
                        layout,
                        resolution,
                        duration,
                        showDates,
                        datePosition
                    }, (progress, status) => {
                        progressFill.style.width = progress + '%';
                        progressText.textContent = status;
                    });
                }
                
                // Show preview
                const preview = document.getElementById('videoPreview');
                const previewVideo = document.getElementById('previewVideo');
                
                previewVideo.src = video.url;
                preview.style.display = 'block';
                
                // Update stats
                updateVideoStats();
                
                showToast('Vídeo gerado com sucesso!');
                
            } catch (error) {
                console.error('Erro ao gerar vídeo:', error);
                showToast('Erro ao gerar vídeo. Tente novamente.', 'error');
            } finally {
                progressBar.style.display = 'none';
                progressText.style.display = 'none';
                generateBtn.disabled = false;
                generateBtn.textContent = '🎬 Gerar Vídeo';
            }
        }

        async function createVideoWithFFmpeg(photos, options, progressCallback) {
            if (!ffmpeg || !ffmpegLoaded) {
                throw new Error('FFmpeg não está carregado');
            }
            
            try {
                progressCallback(0, 'Preparando imagens...');
                
                // Get resolution dimensions
                const dimensions = getResolutionDimensions(options.resolution);
                const fps = 30;
                const frameTime = options.duration;
                
                // Process and write images to FFmpeg filesystem
                const processedImages = [];
                
                for (let i = 0; i < photos.length; i++) {
                    const photo = photos[i];
                    progressCallback(
                        Math.round((i / photos.length) * 30), // 0-30% for image processing
                        `Processando imagem ${i + 1} de ${photos.length}...`
                    );
                    
                    // Convert image to proper format and size
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = dimensions.width;
                    canvas.height = dimensions.height;
                    
                    // Load and draw image
                    const img = new Image();
                    await new Promise((resolve) => {
                        img.onload = resolve;
                        img.src = photo.dataUrl;
                    });
                    
                    // Clear canvas with black background
                    ctx.fillStyle = '#000000';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    
                    // Draw image fitted
                    drawImageFit(ctx, img, 0, 0, canvas.width, canvas.height);
                    
                    // Add date overlay if enabled
                    if (options.showDates) {
                        drawDateOverlay(ctx, photo.date, options.datePosition, canvas.width, canvas.height);
                    }
                    
                    // Convert canvas to blob
                    const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
                    const arrayBuffer = await blob.arrayBuffer();
                    const uint8Array = new Uint8Array(arrayBuffer);
                    
                    // Write to FFmpeg filesystem
                    const filename = `image_${String(i).padStart(4, '0')}.png`;
                    await ffmpeg.writeFile(filename, uint8Array);
                    processedImages.push(filename);
                }
                
                progressCallback(40, 'Configurando codec de vídeo...');
                
                // Prepare FFmpeg command
                const outputFilename = 'output.mp4';
                let ffmpegArgs = [
                    '-framerate', `1/${frameTime}`, // Input framerate (duration per image)
                    '-i', 'image_%04d.png',
                    '-c:v', options.codec,
                    '-b:v', options.bitrate,
                    '-pix_fmt', 'yuv420p',
                    '-r', fps.toString(),
                ];
                
                // Add transition effects
                if (options.transition && options.transition !== 'none') {
                    ffmpegArgs = await addTransitionEffects(ffmpegArgs, options.transition, photos.length, frameTime);
                }
                
                // Add audio if provided
                if (options.audioFile) {
                    progressCallback(50, 'Processando áudio...');
                    const audioBuffer = await options.audioFile.arrayBuffer();
                    await ffmpeg.writeFile('audio.mp3', new Uint8Array(audioBuffer));
                    
                    ffmpegArgs.push(
                        '-i', 'audio.mp3',
                        '-c:a', 'aac',
                        '-b:a', '128k',
                        '-shortest' // Stop when shortest stream ends
                    );
                }
                
                // Add output filename
                ffmpegArgs.push('-y', outputFilename); // -y to overwrite
                
                progressCallback(60, 'Gerando vídeo com FFmpeg...');
                
                // Run FFmpeg command
                await ffmpeg.exec(ffmpegArgs);
                
                progressCallback(90, 'Finalizando...');
                
                // Read the output file
                const data = await ffmpeg.readFile(outputFilename);
                const blob = new Blob([data.buffer], { type: 'video/mp4' });
                const url = URL.createObjectURL(blob);
                
                // Clean up temporary files
                for (const filename of processedImages) {
                    try {
                        await ffmpeg.deleteFile(filename);
                    } catch (e) {
                        // Ignore cleanup errors
                    }
                }
                
                try {
                    await ffmpeg.deleteFile(outputFilename);
                    if (options.audioFile) {
                        await ffmpeg.deleteFile('audio.mp3');
                    }
                } catch (e) {
                    // Ignore cleanup errors
                }
                
                progressCallback(100, 'Vídeo pronto!');
                
                return { blob, url };
                
            } catch (error) {
                console.error('Erro no FFmpeg:', error);
                throw error;
            }
        }
        
        async function addTransitionEffects(ffmpegArgs, transition, photoCount, frameTime) {
            // For advanced transitions, we need to use FFmpeg's complex filter graphs
            // This is a simplified version - more complex transitions would require
            // pre-processing the images with overlap
            
            switch (transition) {
                case 'fade':
                    // Add fade in/out effects
                    ffmpegArgs.splice(-2, 0, 
                        '-vf', `fade=t=in:st=0:d=0.5,fade=t=out:st=${(photoCount * frameTime) - 0.5}:d=0.5`
                    );
                    break;
                    
                case 'crossfade':
                    // This would require more complex filter graph
                    ffmpegArgs.splice(-2, 0, 
                        '-vf', 'fade=t=in:st=0:d=0.3,fade=t=out:st=-0.3:d=0.3'
                    );
                    break;
                    
                case 'slide':
                    // Add slide transition effect
                    ffmpegArgs.splice(-2, 0,
                        '-vf', 'slide=l'
                    );
                    break;
                    
                case 'zoom':
                    // Add zoom effect
                    ffmpegArgs.splice(-2, 0,
                        '-vf', 'zoompan=z=1:d=1:s=1920x1080'
                    );
                    break;
            }
            
            return ffmpegArgs;
        }

        async function createVideoFromPhotos(photos, options, progressCallback) {
            return new Promise(async (resolve, reject) => {
                try {
                    // Get resolution dimensions
                    const dimensions = getResolutionDimensions(options.resolution);
                    
                    // Create canvas
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = dimensions.width;
                    canvas.height = dimensions.height;
                    
                    // Prepare MediaRecorder
                    const stream = canvas.captureStream(30); // 30 FPS
                    const mediaRecorder = new MediaRecorder(stream, {
                        mimeType: 'video/webm;codecs=vp9'
                    });
                    
                    const chunks = [];
                    mediaRecorder.ondataavailable = (e) => {
                        if (e.data.size > 0) {
                            chunks.push(e.data);
                        }
                    };
                    
                    mediaRecorder.onstop = () => {
                        const blob = new Blob(chunks, { type: 'video/webm' });
                        const url = URL.createObjectURL(blob);
                        resolve({ blob, url });
                    };
                    
                    mediaRecorder.start();
                    
                    // Process photos
                    for (let i = 0; i < photos.length; i++) {
                        const photo = photos[i];
                        progressCallback(
                            Math.round((i / photos.length) * 100),
                            `Processando foto ${i + 1} de ${photos.length}...`
                        );
                        
                        // Load image
                        const img = new Image();
                        await new Promise((resolve) => {
                            img.onload = resolve;
                            img.src = photo.dataUrl;
                        });
                        
                        // Draw photo frames
                        const frameDuration = options.duration * 1000; // Convert to ms
                        const frameCount = Math.round((frameDuration / 1000) * 30); // 30 FPS
                        
                        for (let frame = 0; frame < frameCount; frame++) {
                            // Clear canvas
                            ctx.fillStyle = '#000';
                            ctx.fillRect(0, 0, canvas.width, canvas.height);
                            
                            // Draw image
                            drawImageFit(ctx, img, 0, 0, canvas.width, canvas.height);
                            
                            // Draw date overlay if enabled
                            if (options.showDates) {
                                drawDateOverlay(ctx, photo.date, options.datePosition, canvas.width, canvas.height);
                            }
                            
                            // Small delay to ensure frame is captured
                            await new Promise(resolve => setTimeout(resolve, 33)); // ~30 FPS
                        }
                    }
                    
                    progressCallback(100, 'Finalizando vídeo...');
                    
                    // Stop recording after a small delay
                    setTimeout(() => {
                        mediaRecorder.stop();
                    }, 1000);
                    
                } catch (error) {
                    reject(error);
                }
            });
        }

        function getResolutionDimensions(resolution) {
            const resolutions = {
                '720p': { width: 1280, height: 720 },
                '1080p': { width: 1920, height: 1080 },
                '4k': { width: 3840, height: 2160 }
            };
            return resolutions[resolution] || resolutions['1080p'];
        }

        function drawImageFit(ctx, img, x, y, width, height) {
            const imgRatio = img.width / img.height;
            const canvasRatio = width / height;
            
            let drawWidth, drawHeight, drawX, drawY;
            
            if (imgRatio > canvasRatio) {
                drawHeight = height;
                drawWidth = height * imgRatio;
                drawX = x + (width - drawWidth) / 2;
                drawY = y;
            } else {
                drawWidth = width;
                drawHeight = width / imgRatio;
                drawX = x;
                drawY = y + (height - drawHeight) / 2;
            }
            
            ctx.drawImage(img, drawX, drawY, drawWidth, drawHeight);
        }

        function drawDateOverlay(ctx, date, position, canvasWidth, canvasHeight) {
            const formattedDate = formatDate(date);
            const fontSize = Math.max(24, Math.round(canvasHeight * 0.03));
            
            ctx.font = `bold ${fontSize}px Arial`;
            ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
            ctx.strokeStyle = 'white';
            ctx.lineWidth = 2;
            
            const textMetrics = ctx.measureText(formattedDate);
            const textWidth = textMetrics.width;
            const textHeight = fontSize;
            
            let x, y;
            const padding = 20;
            
            switch (position) {
                case 'top-left':
                    x = padding;
                    y = padding + textHeight;
                    break;
                case 'top-right':
                    x = canvasWidth - textWidth - padding;
                    y = padding + textHeight;
                    break;
                case 'bottom-left':
                    x = padding;
                    y = canvasHeight - padding;
                    break;
                case 'bottom-right':
                default:
                    x = canvasWidth - textWidth - padding;
                    y = canvasHeight - padding;
                    break;
            }
            
            // Draw background
            ctx.fillRect(x - 10, y - textHeight - 5, textWidth + 20, textHeight + 15);
            
            // Draw text
            ctx.fillStyle = 'white';
            ctx.strokeText(formattedDate, x, y);
            ctx.fillText(formattedDate, x, y);
        }

        function downloadVideo() {
            const video = document.getElementById('previewVideo');
            if (video.src) {
                const a = document.createElement('a');
                a.href = video.src;
                
                // Determine file extension based on the blob type or FFmpeg usage
                const extension = ffmpegLoaded ? 'mp4' : 'webm';
                a.download = `evolucao-${new Date().toISOString().split('T')[0]}.${extension}`;
                a.click();
                showToast('Download iniciado!');
            }
        }

        function shareVideo() {
            const video = document.getElementById('previewVideo');
            if (navigator.share && video.src) {
                // Convert video URL to blob for sharing
                fetch(video.src)
                    .then(response => response.blob())
                    .then(blob => {
                        const extension = ffmpegLoaded ? 'mp4' : 'webm';
                        const mimeType = ffmpegLoaded ? 'video/mp4' : 'video/webm';
                        const file = new File([blob], `evolucao.${extension}`, { type: mimeType });
                        return navigator.share({
                            title: 'Minha Evolução - FitProgress',
                            text: 'Confira minha jornada de transformação!',
                            files: [file]
                        });
                    })
                    .then(() => showToast('Compartilhado com sucesso!'))
                    .catch(err => {
                        console.log('Erro ao compartilhar:', err);
                        // Fallback: copy link
                        navigator.clipboard.writeText(window.location.href);
                        showToast('Link copiado para a área de transferência!');
                    });
            } else {
                // Fallback: copy link
                navigator.clipboard.writeText(window.location.href);
                showToast('Link copiado para a área de transferência!');
            }
        }

        function updateStats() {
            document.getElementById('totalPhotos').textContent = photos.length;
            
            if (photos.length > 0) {
                const firstPhotoDate = new Date(Math.min(...photos.map(p => new Date(p.date))));
                const daysDiff = Math.floor((new Date() - firstPhotoDate) / (1000 * 60 * 60 * 24));
                document.getElementById('daysSince').textContent = daysDiff;
                
                // Calculate current streak (photos in consecutive days)
                const streak = calculateStreak();
                document.getElementById('currentStreak').textContent = streak;
            }
            
            const videosCreated = parseInt(localStorage.getItem('fitProgressVideosCreated') || '0');
            document.getElementById('videosCreated').textContent = videosCreated;
            
            updateTimeline();
        }

        function calculateStreak() {
            if (photos.length === 0) return 0;
            
            const sortedDates = [...new Set(photos.map(p => p.date))].sort((a, b) => new Date(b) - new Date(a));
            let streak = 0;
            const today = new Date().toISOString().split('T')[0];
            
            for (let i = 0; i < sortedDates.length; i++) {
                const currentDate = new Date(sortedDates[i]);
                const expectedDate = new Date();
                expectedDate.setDate(expectedDate.getDate() - i);
                
                if (sortedDates[i] === expectedDate.toISOString().split('T')[0]) {
                    streak++;
                } else {
                    break;
                }
            }
            
            return streak;
        }

        function updateVideoStats() {
            const current = parseInt(localStorage.getItem('fitProgressVideosCreated') || '0');
            localStorage.setItem('fitProgressVideosCreated', (current + 1).toString());
            updateStats();
        }

        function updateTimeline() {
            const timeline = document.getElementById('timeline');
            
            if (photos.length === 0) {
                timeline.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;">Sua jornada aparecerá aqui conforme você adicionar fotos.</div>';
                return;
            }
            
            // Group photos by month
            const photosByMonth = photos.reduce((acc, photo) => {
                const monthYear = new Date(photo.date).toLocaleDateString('pt-BR', { year: 'numeric', month: 'long' });
                if (!acc[monthYear]) acc[monthYear] = [];
                acc[monthYear].push(photo);
                return acc;
            }, {});
            
            timeline.innerHTML = '';
            
            Object.entries(photosByMonth)
                .sort(([a], [b]) => new Date(b) - new Date(a))
                .forEach(([month, monthPhotos]) => {
                    const item = document.createElement('div');
                    item.className = 'timeline-item';
                    item.innerHTML = `
                        <div class="timeline-content">
                            <h4>${month}</h4>
                            <p>${monthPhotos.length} foto${monthPhotos.length > 1 ? 's' : ''} adicionada${monthPhotos.length > 1 ? 's' : ''}</p>
                            <div style="display: flex; gap: 5px; margin-top: 10px;">
                                ${monthPhotos.slice(0, 3).map(photo => `
                                    <img src="${photo.dataUrl}" style="width: 60px; height: 60px; object-fit: cover; border-radius: 6px;" alt="Photo">
                                `).join('')}
                                ${monthPhotos.length > 3 ? `<div style="width: 60px; height: 60px; background: #f0f0f0; border-radius: 6px; display: flex; align-items: center; justify-content: center; font-size: 0.8em; color: #666;">+${monthPhotos.length - 3}</div>` : ''}
                            </div>
                        </div>
                    `;
                    timeline.appendChild(item);
                });
        }

        function loadSettings() {
            document.getElementById('autoBackup').checked = settings.autoBackup || false;
            document.getElementById('notifications').checked = settings.notifications || false;
            document.getElementById('telemetry').checked = settings.telemetry || false;
        }

        function saveSettings() {
            settings = {
                autoBackup: document.getElementById('autoBackup').checked,
                notifications: document.getElementById('notifications').checked,
                telemetry: document.getElementById('telemetry').checked
            };
            localStorage.setItem('fitProgressSettings', JSON.stringify(settings));
        }

        // Auth functions
        function loginGoogle() {
            showToast('Login com Google em desenvolvimento!');
        }

        function loginApple() {
            showToast('Login com Apple em desenvolvimento!');
        }

        function loginEmail() {
            document.getElementById('loginModal').classList.add('show');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        // Data management
        function exportData() {
            const data = {
                photos: photos,
                settings: settings,
                exportDate: new Date().toISOString()
            };
            
            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `fitprogress-backup-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            
            URL.revokeObjectURL(url);
            showToast('Dados exportados com sucesso!');
        }

        function deleteAllData() {
            if (confirm('ATENÇÃO: Esta ação irá excluir TODAS as suas fotos e dados permanentemente. Esta ação não pode ser desfeita. Tem certeza?')) {
                if (confirm('Última confirmação: Realmente deseja excluir todos os seus dados?')) {
                    localStorage.removeItem('fitProgressPhotos');
                    localStorage.removeItem('fitProgressSettings');
                    localStorage.removeItem('fitProgressUser');
                    localStorage.removeItem('fitProgressVideosCreated');
                    
                    photos = [];
                    settings = {};
                    currentUser = null;
                    
                    displayPhotos();
                    updateStats();
                    loadSettings();
                    
                    showToast('Todos os dados foram excluídos!');
                }
            }
        }

        // Utility functions
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast ${type} show`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, type === 'info' ? 5000 : 3000); // Longer display for info messages
        }

        // Event listeners for settings
        document.addEventListener('change', function(e) {
            if (e.target.matches('#autoBackup, #notifications, #telemetry')) {
                saveSettings();
            }
        });

        // Login form handler
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            // Simulate login (replace with real authentication)
            showToast('Login em desenvolvimento. Use sem cadastro por enquanto!');
            closeModal('loginModal');
        });

        // Handle browser storage warnings
        window.addEventListener('beforeunload', function() {
            if (photos.length > 0) {
                savePhotos();
            }
        });

        // Mobile optimizations
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js').catch(err => {
                console.log('Service Worker registration failed:', err);
            });
        }

        // Performance monitoring
        if (settings.telemetry) {
            // Basic anonymous telemetry
            const usage = {
                photosCount: photos.length,
                lastUsed: new Date().toISOString(),
                features: {
                    videoGeneration: localStorage.getItem('fitProgressVideosCreated') > 0,
                    comparison: false // Will be updated when feature is used
                }
            };
            // This would be sent to analytics service in production
        }
    </script>
</body>
</html>